Detailed breakdown of fft_analyzer.py

---

### Imports

import numpy as np
- numpy is imported for efficient numerical operations, especially for FFT and frequency calculations.

---

### FFTAnalyzer Class

Purpose:
- Provides methods to perform Fast Fourier Transform (FFT) analysis on signals, extracting their frequency components and normalizing the result.

---

__init__ Method

def __init__(self, sample_rate=1000):
    self.sample_rate = sample_rate

- sample_rate: Number of samples per second (Hz). Default is 1000.
- self.sample_rate: Stores the sampling rate for use in frequency calculations.

---

compute_fft Method

def compute_fft(self, signal):
    n = len(signal)
    fft_vals = np.fft.fft(signal)
    fft_freqs = np.fft.fftfreq(n, d=1/self.sample_rate)
    magnitudes = np.abs(fft_vals) / n
    # Only keep positive frequencies
    mask = fft_freqs >= 0
    return fft_freqs[mask], magnitudes[mask]

- signal: Input time-domain signal (array-like).
- n: Length of the signal.
- fft_vals: Computes the FFT of the input signal.
- fft_freqs: Frequency bins corresponding to the FFT result.
- magnitudes: Normalized magnitude of each frequency component.
- mask: Boolean array to select only non-negative frequencies.
- Returns: Arrays of positive frequencies and their magnitudes.

---

Summary

- The class allows you to analyze the frequency content of time-domain signals.
- Returns only positive frequencies and normalized magnitudes for easier interpretation.
- Useful for digital signal processing and spectral analysis tasks.
