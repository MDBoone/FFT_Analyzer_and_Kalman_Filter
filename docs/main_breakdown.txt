Detailed breakdown of main.py

---

### Imports

from signal_generator import SignalGenerator
from fft_analyzer import FFTAnalyzer
from kalman_filter import KalmanFilter1D
import plot_utils as plt_utils
- Imports classes and functions for signal generation, FFT analysis, Kalman filtering, and plotting utilities.

---

### Initialization

fs = 1000
generator = SignalGenerator(sample_rate=fs)
fft = FFTAnalyzer(sample_rate=fs)
kf = KalmanFilter1D()

- fs: Sampling rate set to 1000 Hz.
- generator: Instance for generating signals.
- fft: Instance for performing FFT analysis.
- kf: Instance for 1D Kalman filtering.

---

t = generator.t
- t: Time array generated by the SignalGenerator instance.

---

### Signal Generation

target_signal = generator.generate_target_signal()
jammer_signal = generator.generate_jammer_signal()
composite = target_signal + jammer_signal

- target_signal: Sine wave representing the target.
- jammer_signal: Sine wave representing the jammer.
- composite: Sum of target and jammer signals.

---

### FFT Analysis

freqs, magnitudes = fft.compute_fft(composite)
- Computes the frequency spectrum of the composite signal.
- freqs: Frequency bins.
- magnitudes: Magnitude of each frequency component.

---

### Kalman Filtering

filtered = kf.filter(composite)
- Applies the Kalman filter to the composite signal.
- filtered: Array of filtered (smoothed) signal values.

---

### Plotting

plt_utils.plot_signal(t, target_signal, title="Raw Target Signal (50 Hz)", label="Target 50 Hz")
plt_utils.plot_signal(t, jammer_signal, title="Raw Jammer Signal (200 Hz)", label="Jammer 200 Hz")
plt_utils.plot_signal(t, composite, title="Composite Signal", label="Target + Jammer")
plt_utils.plot_signal(t, filtered, title="Kalman Filtered Signal", label="Filtered")
plt_utils.plot_fft(freqs, magnitudes, title="FFT of Composite Radar Signal")

- Plots the target, jammer, composite, and filtered signals in the time domain.
- Plots the FFT spectrum of the composite signal.

---

Summary

- The script generates, processes, and visualizes signals using signal generation, FFT, and Kalman filtering.
- Useful for demonstrating signal processing workflows and visualizing the effects of filtering and spectral analysis.
